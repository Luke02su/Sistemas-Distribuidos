/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.poo2.prjservidorchat_thread;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Enumeration;
import java.util.Vector;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import java.io.PrintStream;
import javax.swing.JTextArea;

/**
 *
 * @author TI04
 */
public class Interface3 extends javax.swing.JFrame implements Runnable {
    private static Vector clientes;
    private Socket conexao;
    private String meuNome;
    private String linha;

    /**
     * Creates new form Interface3
     */
    public Interface3() {
        initComponents();

        // Redireciona a saída do console para o JTextArea
        PrintStream printStream = new PrintStream(new TextAreaOutputStream(txtChatServidor));
        System.setOut(printStream);  // Agora tudo que for enviado para System.out vai para o JTextArea
        
        new Thread(this::conectarAoServidor).start();
    }
    
    private void conectarAoServidor() {
        // instancia do vetor de clientes conectados
        
        clientes = new Vector();

        try {
            //instancia do vector de clientes conectados na porta 2222
            ServerSocket ss = new ServerSocket(2222);

            while(true) {
                /*Aguarda algum cliente se onectar. O método "accpet()" segura 
                execução até o cliente se conectar.
                */

                System.out.println("Esperando um cliente realizar a conexão...");

                Socket con = ss.accept();
                System.out.println("Conexão realizada!!!");
                //Cria uma nova thread para tratar a conexão

                Thread t = new Thread((Runnable)new Interface3(con)); 
                t.start();
                
                //loop esperando um novo cliente se conectar.
            }
        }
        catch(IOException ex) {
            ex.printStackTrace();
        }
    }

    public Interface3(Socket ss) {
        conexao = ss;
    }

    @Override
    public void run() {
        try {
            //objetos que permitem controlar fluxo de comunicação
            BufferedReader entrada = new BufferedReader(
                new InputStreamReader(conexao.getInputStream())); // espera caracteres 
            PrintStream saida = new PrintStream(conexao.getOutputStream());
            
            meuNome = entrada.readLine();
            
            if(meuNome == null) {
                return;
            }
            
            clientes.add(saida);
            
            linha = entrada.readLine(); //extrair linha que for escrita pelo cliente
            
            while(linha != null && !(linha.trim().equals(""))) {
                System.out.println(meuNome + " falou: " + linha);
                //txtChatServidor.append(meuNome + " falou: " + linha + "\n"); não funcionou, tentei de tudo!
                enviarParaTodos(saida, " falou: ", linha);

                linha = entrada.readLine();
            }
            
            enviarParaTodos(saida, " saiu ", " do chat");
        
            clientes.remove(saida); 
            conexao.close();
        } catch(IOException ex) {
            ex.printStackTrace();
        }
    }

    public void enviarParaTodos(PrintStream saida, String acao, String linha) {
        Enumeration e = clientes.elements();
        
        while(e.hasMoreElements()) {
            PrintStream chat = (PrintStream) e.nextElement();
            
            chat.println(meuNome + acao + linha);
        }
    }
      

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtChatServidor = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtChatServidor.setColumns(20);
        txtChatServidor.setRows(5);
        txtChatServidor.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtChatServidorCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(txtChatServidor);

        jLabel1.setText("Chat do Servidor:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtChatServidorCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtChatServidorCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_txtChatServidorCaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface3().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtChatServidor;
    // End of variables declaration//GEN-END:variables

 
    public class TextAreaOutputStream extends OutputStream { //criaca da classe para pegar o que for escrito no terminal e imprimir na textArea
        private JTextArea textArea;

        // Construtor
        public TextAreaOutputStream(JTextArea textArea) {
            this.textArea = textArea;
        }

        // Sobrescreve o método write para capturar a saída e colocá-la no JTextArea
        @Override
        public void write(int b) throws IOException {
            // Adiciona o caractere no JTextArea
            textArea.append(String.valueOf((char) b));

            // Garante que o texto será visível após a adição
            textArea.setCaretPosition(textArea.getDocument().getLength());
        }

        // Sobrescreve o método write para lidar com múltiplos bytes
        @Override
        public void write(byte[] b, int off, int len) throws IOException {
            textArea.append(new String(b, off, len));
            textArea.setCaretPosition(textArea.getDocument().getLength());
        }
    }
}


